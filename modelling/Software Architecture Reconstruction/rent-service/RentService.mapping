import microservices from "RentService.services" as RentService
import technology from "../technology/java2.technology" as java

@technology(java)
type RentService::RentService::rent.RentService {
	op calculateRent {
		aspects {
			java::_aspects.Throws("EntityNotFoundExceptions");
			java::_aspects.Throws("InvalidRequestParamException");
		}
	}
}

@technology(java)
RentService::de.uniba.dsg.carrental.RentService {
	aspects {
		java::_aspects.ServerPort(8300);
		java::_aspects.ApplicationName("rent-service");
		java::_aspects.Profile("dev, prod");
		java::_aspects.SpringConfigImport("configserver:");
		java::_aspects.SpringCloudConfigUri("http://localhost:8888");
		java::_aspects.SpringDocPath("/rent-service/api-doc");
		
		java::_aspects.EurekaClient(
			fetchRegistry = true,
			registerWithEureka = true,
			serviceUrlDefaultZone = "http://localhost:8761/eureka"
		);
		
		java::_aspects.FeignClientConfigDefault(
			readTimeout = 5000,
			connectTimeout = 5000
		);
		
		java::_aspects.CustomProperty(name="application.title", value="${spring.application.name}");
		java::_aspects.CustomProperty(name="application.version", value="1.0.0");
		java::_aspects.CustomProperty(name="application.description", value="Rent Service of Car Rental Microservices Application");
		java::_aspects.CustomProperty(name="application.unique-id", value="${application.title}_${application.version}");
		java::_aspects.CustomProperty(name="application.domain", value="car-rental/rent-service");
		java::_aspects.CustomProperty(name="application.contact-person.name", value="Master Developer");
		java::_aspects.CustomProperty(name="application.contact-person.email", value="master.developer@carrental.com");
		java::_aspects.CustomProperty(name="application.technology-stack", value="Java Springboot0");
		java::_aspects.CustomProperty(name="application.creation-date", value="01/01/20220");
		
		java::_aspects.CustomProperty(name="instance.port", value="${server_port}");
		java::_aspects.CustomProperty(name="instance.base-path", value="http://localhost:${server_port}");
		java::_aspects.CustomProperty(name="instance.host", value="docker-default");
		java::_aspects.CustomProperty(name="instance.region", value="default");
		java::_aspects.CustomProperty(name="instance.protocols[0]", value="http");
		java::_aspects.CustomProperty(name="instance.technology", value="Springboot");
		java::_aspects.CustomProperty(name="instance.request-log-endpoint", value="${logging.get-request-logs.path}");
		java::_aspects.CustomProperty(name="instance.container-id", value="${spring.application.name}_${random.uuid}");
		
		java::_aspects.CustomProperty(name="logging.directory", value="${user.home}/architecture-extraction-logs/${instance.container-id}/logs");
		java::_aspects.CustomProperty(name="logging.request.file-name", value="request.log");
		java::_aspects.CustomProperty(name="logging.get-request-logs.path", value="/rent-service/architecture-extraction/request-logs");
		java::_aspects.CustomProperty(name="logging.ignore-paths", value="${springdoc.api-docs.path},${logging.get-request-logs.path}");
		
		java::_aspects.CustomProperty(name="architecture-extraction.create-instance-endpoint", value="http://localhost:9001/management-service/ServiceInstancess");
	}
	
	interface RentController {
		endpoints {
			java::_protocols.rest: "/rent-service/api/v1/rent";
		}
	}
	
	operation RentController.getRent {
		aspects {
			java::_aspects.GetMapping;
					
			java::_aspects.HttpCode_200;
			java::_aspects.HttpCode_400;
			java::_aspects.HttpCode_500;
		}
		
		parameters {
			primitive carCode {
				aspects {
					java::_aspects.RequestParam(value = "carCode");
				}
			}
			
			primitive fromLocationCode {
				aspects {
					java::_aspects.RequestParam(value = "fromLocationCode");
				}
			}
			
			primitive toLocationCode {
				aspects {
					java::_aspects.RequestParam(value = "toLocationCodes");
				}
			}
			
			complex response {
				aspects {
					java::_aspects.ResponseEntity;
				}
			}
		}
	}
}